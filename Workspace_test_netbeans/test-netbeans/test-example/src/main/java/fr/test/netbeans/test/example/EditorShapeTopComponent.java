package fr.test.netbeans.test.example;

import java.awt.BorderLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.explorer.ExplorerManager;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
		preferredID = "EditorShapeTopComponent",
		iconBase = "",
		persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
//@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "fr.test.netbeans.test.example.EditorShapeTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
		displayName = "#CTL_EditorShapeAction",
		preferredID = "EditorShapeTopComponent"
)
@Messages({
	"CTL_EditorShapeAction=Shapes",
	"CTL_EditorShapeTopComponent=Shapes",
	"HINT_EditorShapeTopComponent=Simple shapes which can be imported in a Synoptic"
})
public final class EditorShapeTopComponent extends TopComponent {

	protected JLabel selectedEntry = null;
	private ExplorerManager em;
	private JPanel content = new JPanel();
	private final JScrollPane scrollPane;

	public EditorShapeTopComponent() {
		initComponents();
		setName(Bundle.CTL_EditorShapeTopComponent());
		setToolTipText(Bundle.HINT_EditorShapeTopComponent());

		setLayout(new BorderLayout());

		scrollPane = new JScrollPane(content);
		scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.getVerticalScrollBar().setUnitIncrement(16);
		add(scrollPane, BorderLayout.CENTER);

		setName(Bundle.CTL_EditorShapeTopComponent());
		setToolTipText(Bundle.HINT_EditorShapeTopComponent());

		
	}

	
	
	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}
}
